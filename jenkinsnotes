pipeline{
    agent any
    stages{
        stage("Copy files to Docker Server"){
            //agent { dockerfile true }      
            steps{
                script{
                    //withCredentials([sshUserPrivateKey(credentialsId: 'sshCredentials', keyFileVariable: 'shyneubuntuserver', passphraseVariable: 'password', usernameVariable: 'username')]) {
                    sshagent(['sshCredentials']) {
                        // some block
                        sh '''
                            echo "===x=====executing A========"
                            pwd
                            scp -i ${password} classproject/Google-Kubernetes-boilerplate/app/adservice/* ubuntu@35.183.109.118:~/
                            scp -i ${password} dockerinstallscript.sh ubuntu@35.183.109.118:~/
                            #//sh "cd app/adservice/"
                            #//sh "docker build ."
                            #//sh "docker build . -t testapp"                  
                    // }
                            '''
                    }    

                }

            }
        }

        stage("connect to Docker server"){

            environment { 
                SSH_CRED = credentials('sshCredentials')
            }

            steps {
                script {
                    sh """
                    #!/bin/bash
                    ssh -i $SSH_CRED -t -o StrictHostKeyChecking=no ubuntu@35.183.109.118 << EOF
                    sudo chmod 777 dockerinstallscript.sh
                    sh dockerinstallscript.sh
                    docker build . -t apserviceimage 
                    #curl ifconfig.co/ip
                    #df -h
                    exit
                    << EOF
                    """
                }
                
            }
        }
        stage("Push Image to Dockerhub"){
            steps{
                echo "========executing A========"
            }
        }
        stage(""){
            steps{
                echo "========executing A========"
            }
        }
    }
}
    





pipeline {

    agent any

    stages {
        stage("environment preparation"){
            steps {
                sh "pwd"
                sh "ls"
                sh "echo ${USER}"
                sh "df -h"
                sh "curl ifconfig.co"
                sh "echo testing"
            }
        }

        stage("connect to deploy server"){

            environment { 
                SSH_CRED = credentials('blank-vm-pem')
            }

            steps {
                //=============== THIRD APPROACH
                script {
                    sh """
                    #!/bin/bash
                    ssh -i $SSH_CRED -t -o StrictHostKeyChecking=no ubuntu@ec2-52-25-213-88.us-west-2.compute.amazonaws.com << EOF
                    curl ifconfig.co/ip
                    df -h
                    exit
                    << EOF
                    """
                }
                
            }
        }
    }
}









pipeline{
    agent any
    stages{
        stage("Create Images"){
            agent {
                docker {
                    reuseNode true
                }
            }            
            steps{
                echo "===x=====executing A========"
                sh "pwd"
                sh "cd app/adservice/"
                sh "docker build ."
            }
        }
        stage("Push Image to Dockerhub"){
            steps{
                echo "========executing A========"
            }
        }
        stage(""){
            steps{
                echo "========executing A========"
            }
        }
    }
    
}




pipeline {
    agent any
    stages {
        stage('Build') {
            agent {
                docker {
                    image 'gradle:6.7-jdk11'
                    // Run the container on the node specified at the
                    // top-level of the Pipeline, in the same workspace,
                    // rather than on a new node entirely:
                    reuseNode true
                }
            }
            steps {
                sh 'gradle --version'
            }
        }
    }
}



adservicejenkins -f /var/jenkins_home/workspace/TeamSCC-project@2/app/adservice/Dockerfile


docker run --rm -u root -p 8089:8080 -v jenkins-data:/var/jenkins_home -v $(which docker):/usr/bin/docker -v /var/run/docker.sock:/var/run/docker.sock -v "$HOME":/home jenkinsci/blueocean